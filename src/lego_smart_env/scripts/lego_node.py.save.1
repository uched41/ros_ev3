#!/usr/bin/env python3
import os
import rospy
from std_msgs.msg import String
from ev3dev2.sensor.lego import UltrasonicSensor
from ev3dev2.motor import LargeMotor,OUTPUT_A,OUTPUT_B,SpeedPercent,MoveTank, MoveDifferential, SpeedRPM
from ev3dev2.sensor import INPUT_4
from ev3dev2.wheel import EV3Tire
from time import sleep

waiting_s = False
STUD_MM = 8

def send_request():
	global pub
	global waiting_s
	if not waiting_s:
		req="start"
		newmsg = String()
		waiting_s = True
		newmsg.data = req
		rospy.loginfo(req)
		pub.publish(req)
		waiting_s = True
		print("Command sent")
		rate.sleep()

def callback(data):
	global obstacles
	global waiting_s
	waiting_s = False
	print(data.data)
	rospy.loginfo(rospy.get_caller_id()+"I got a response %s", data.data)
	if data.data in obstacles:
		try:
			tank_drive.turn_right(SpeedRPM(40), 90)
		except rospy.ROSInterruptException:
			pass
	else:
		try:
			tank_drive.turn_left(SpeedRPM(40), 90)
		except rospy.ROSInterrupException:
			pass

#def get_response():
	#rospy.Subscriber('/smart_environment/response',String,callback)
	#rospy.spin()

if __name__ == '__main__':
	obstacle_list=[]

	print("Startimg ...")
	file_location = os.path.join( "/home/robot/catkin_ws/src/lego_smart_env/scripts", "obstacles.txt" )
	fp=open(file_location, "r")
	obstacle_name=fp.readline()
	while obstacle_name:
		obstacle_list.append(obstacle_name[:-1])
		obstacle_name=fp.readline()

	print("initializing ros node")	
	rospy.init_node('lego_node',anonymous=True)
	print("ros node initialized")
	us=UltrasonicSensor()
	tank_drive=MoveDifferential(OUTPUT_A,OUTPUT_B, EV3Tire, 16*STUD_MM)
	tank_drive.odometry_start()
	rate = rospy.Rate(1)
	pub=rospy.Publisher('/smart_environment/request',String,queue_size=10)
	rospy.Subscriber('/smart_environment/response',String,callback)
	print("starting loop")

	while not rospy.is_shutdown():	
		try:
			if us.distance_centimeters>10:
				tank_drive.on_for_distance(SpeedRPM(30), -100)

			else:	
				send_request()
				#sleep(5)
				#get_response()
		except rospy.ROSInterruptException:
			pass




























